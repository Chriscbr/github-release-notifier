"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitClient = exports.GithubClient = exports.ActionMode = void 0;
const cp = require("child_process");
const core = require("@actions/core");
const github = require("@actions/github");
const constants_1 = require("./constants");
const util_1 = require("./util");
var ActionMode;
(function (ActionMode) {
    /**
     * Backfills previous pull requests and issues with release reminders
     * for all previous releases as a bulk operation.
     *
     * The operation will finish when the max-backfill-operations limit is
     * reached, or when all releases have been backfilled.
     */
    ActionMode["ALL"] = "all";
    /**
     * Add release reminders to issues and pull requests for only the
     * latest available release.
     */
    ActionMode["LATEST"] = "latest";
})(ActionMode = exports.ActionMode || (exports.ActionMode = {}));
function getContext() {
    core.debug(`owner: ${github.context.repo.owner}`);
    core.debug(`repo: ${github.context.repo.repo}`);
    return github.context.repo;
}
function getOptions() {
    core.debug(`mode: ${core.getInput('mode')}`);
    core.debug(`maximum-comments: ${core.getInput('maximum-comments')}`);
    const mode = ActionMode[core.getInput('mode')];
    const maximumComments = parseInt(core.getInput('maximum-comments'), 10); // may be NaN
    const options = {
        mode: mode !== null && mode !== void 0 ? mode : ActionMode.LATEST,
        maximumComments: maximumComments || 50,
    };
    core.debug(`options: ${JSON.stringify(options)}`);
    return options;
}
class GithubClient {
    constructor(octokit, owner, repo) {
        this.octokit = octokit;
        this.owner = owner;
        this.repo = repo;
    }
    async getLatestRelease() {
        var _a;
        const response = await this.octokit.request(`GET /repos/${this.owner}/${this.repo}/releases/latest`);
        core.debug(`getLatestRelease: (${response.status}) ${(_a = response.data) === null || _a === void 0 ? void 0 : _a.name}`);
        return response.data;
    }
    async getPullRequestsFromCommit(commitSha) {
        var _a;
        const response = await this.octokit.request(`GET /repos/${this.owner}/${this.repo}/commits/${commitSha}/pulls`, {
            // specify a media type because this feature is in preview
            mediaType: {
                previews: ['groot'],
            },
        });
        core.debug(`getPullRequestsFromCommit: (${response.status}) ${(_a = response.data) === null || _a === void 0 ? void 0 : _a.map((pr) => pr.url).join('\n')}`);
        return response.data;
    }
    async getIssue(issueNumber) {
        var _a;
        const response = await this.octokit.request(`GET /repos/${this.owner}/${this.repo}/issues/${issueNumber}`);
        core.debug(`getIssue: (${response.status}) #${(_a = response.data) === null || _a === void 0 ? void 0 : _a.number}`);
        return response.data;
    }
    async addComment(issueNumber, body) {
        core.debug(`adding comment to #${issueNumber}...`);
        await this.octokit.request(`POST /repos/${this.owner}/${this.repo}/issues/${issueNumber}/comments`, {
            body: body,
        });
    }
}
exports.GithubClient = GithubClient;
class GitClient {
    constructor() {
        this.workspace = this.setupWorkspace();
    }
    setupWorkspace() {
        if (!process.env.GITHUB_WORKSPACE) {
            throw new Error('GITHUB_WORKSPACE is not set in the current repository!');
        }
        return process.env.GITHUB_WORKSPACE;
    }
    getTag(tag) {
        return cp.execSync(`git show-ref -s ${tag}`, { cwd: this.workspace }).toString().trim();
    }
    getPreviousTag(tag) {
        return cp.execSync(`git describe --tags --abbrev=0 ${tag}^`, { cwd: this.workspace }).toString().trim();
    }
    /**
     * Returns a list of commit hashes beginning AFTER fromTag, up to and
     * INCLUDING toTag.
     */
    getCommitsBetweenTags(fromTag, toTag) {
        return cp.execSync(`git rev-list ${fromTag}..${toTag}`).toString().trim().split('\n');
    }
}
exports.GitClient = GitClient;
async function getPullRequests(gitClient, githubClient, release) {
    core.debug(`getting pull requests for release: ${release.name}`);
    const tag = release.tag_name;
    core.debug(`tag: ${tag}`);
    const previousTag = gitClient.getPreviousTag(tag);
    core.debug(`previousTag: ${previousTag}`);
    const commits = gitClient.getCommitsBetweenTags(previousTag, tag);
    core.debug(`commits: ${commits}`);
    const promises = commits.map((commitSha) => githubClient.getPullRequestsFromCommit(commitSha));
    const pullRequests = (await resolveAndReturnSuccesses(promises)).flat();
    // TODO: validate that the pull request was actually merged?
    // https://docs.github.com/en/rest/reference/pulls#check-if-a-pull-request-has-been-merged
    core.debug(`pullRequests: ${pullRequests.map(pr => pr.url)}`);
    return pullRequests;
}
/**
 * Returns a list of issue numbers mentioned in a pull request description.
 * @see https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword
 */
function parseIssueNumbers(description) {
    const output = [];
    for (const re of constants_1.LINKED_ISSUE_REGEXES) {
        const matches = description.matchAll(re);
        for (const match of matches) {
            const issueNumber = match[1]; // grab the captured group
            output.push(parseInt(issueNumber));
        }
    }
    return output;
}
async function getLinkedIssues(githubClient, pullRequest) {
    core.debug(`getting linked issues for pull request: #${pullRequest.number}`);
    const prBody = pullRequest.body.toLowerCase();
    const issueNumbers = util_1.dedupArray(parseIssueNumbers(prBody));
    core.debug(`issue numbers found: [${issueNumbers.map((num) => '#' + num).join(',')}]`);
    const issues = await resolveAndReturnSuccesses(issueNumbers.map((issueNum) => githubClient.getIssue(issueNum)));
    core.debug(`issues: ${issues.map(issue => issue.url).join('\n')}`);
    return issues;
}
async function resolveAndReturnSuccesses(promises) {
    const promiseResults = await Promise.allSettled(promises);
    const output = [];
    for (const result of promiseResults) {
        if (result.status === 'fulfilled') {
            output.push(result.value);
        }
    }
    return output;
}
// TODO: filter out PRs/issues that have already been commented on
async function commentOn(githubClient, pullRequest, issues, repo, release) {
    const promises = [];
    const prMessage = constants_1.PR_COMMENT_TEMPLATE(repo, release.name);
    promises.push(githubClient.addComment(pullRequest.number, prMessage));
    for (const issue of issues) {
        const issueMessage = constants_1.ISSUE_COMMENT_TEMPLATE(pullRequest.number, repo, release.name);
        promises.push(githubClient.addComment(issue.number, issueMessage));
    }
    const results = await Promise.allSettled(promises);
    let total = 0;
    for (const result of results) {
        if (result.status === 'rejected') {
            core.error(`error commenting on issue/pr: ${result.reason}`);
            continue;
        }
        total += 1;
    }
    return total;
}
async function run() {
    try {
        const options = getOptions();
        const { owner, repo } = getContext();
        if (options.mode !== ActionMode.LATEST) {
            throw new Error('Only "latest" mode is currently supported.');
        }
        const token = core.getInput('token', { required: true });
        if (token === 'DEBUG_TOKEN') {
            core.info('DEBUG_TOKEN has been provided, exiting early.');
            core.setOutput('total-comments', 0);
            return;
        }
        const octokit = github.getOctokit(token);
        const githubClient = new GithubClient(octokit, owner, repo);
        const gitClient = new GitClient();
        const latestRelease = await githubClient.getLatestRelease();
        const pullRequests = await getPullRequests(gitClient, githubClient, latestRelease);
        let totalComments = 0;
        for (const pullRequest of pullRequests) {
            const issues = await getLinkedIssues(githubClient, pullRequest);
            totalComments += await commentOn(githubClient, pullRequest, issues, repo, latestRelease);
        }
        core.setOutput('total-comments', totalComments);
    }
    catch (error) {
        core.setFailed(error.message);
    }
}
// eslint-disable-next-line @typescript-eslint/no-floating-promises
run();
//# sourceMappingURL=data:application/json;base64,