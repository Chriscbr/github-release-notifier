"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitClient = exports.GithubClient = exports.ActionMode = void 0;
const cp = require("child_process");
const core = require("@actions/core");
const github = require("@actions/github");
var ActionMode;
(function (ActionMode) {
    /**
     * Backfills previous pull requests and issues with release reminders
     * for all previous releases as a bulk operation.
     *
     * The operation will finish when the max-backfill-operations limit is
     * reached, or when all releases have been backfilled.
     */
    ActionMode["ALL"] = "all";
    /**
     * Add release reminders to issues and pull requests for only the
     * latest available release.
     */
    ActionMode["LATEST"] = "latest";
})(ActionMode = exports.ActionMode || (exports.ActionMode = {}));
function getContext() {
    core.debug(`owner: ${github.context.repo.owner}`);
    core.debug(`repo: ${github.context.repo.repo}`);
    return github.context.repo;
}
function getOptions() {
    core.debug(`mode: ${core.getInput('mode')}`);
    core.debug(`maximum-comments: ${core.getInput('maximum-comments')}`);
    const mode = ActionMode[core.getInput('mode')];
    const maximumComments = parseInt(core.getInput('maximum-comments'), 10); // may be NaN
    const options = {
        mode: mode !== null && mode !== void 0 ? mode : ActionMode.LATEST,
        maximumComments: maximumComments || 50,
    };
    core.debug(`options: ${JSON.stringify(options)}`);
    return options;
}
class GithubClient {
    constructor(octokit, owner, repo) {
        this.octokit = octokit;
        this.owner = owner;
        this.repo = repo;
    }
    async getLatestRelease() {
        const response = await this.octokit.request(`GET /repos/${this.owner}/${this.repo}/releases/latest`);
        core.debug(`getLatestRelease: ${JSON.stringify(response)}`);
        return response.data;
    }
    async getPullRequestsFromCommit(commitSha) {
        const response = await this.octokit.request(`GET /repos/${this.owner}/${this.repo}/commits/${commitSha}/pulls`);
        core.debug(`getPullRequestsFromCommit: ${JSON.stringify(response)}`);
        return response.data;
    }
}
exports.GithubClient = GithubClient;
class GitClient {
    constructor() {
        this.workspace = this.setupWorkspace();
    }
    setupWorkspace() {
        if (!process.env.GITHUB_WORKSPACE) {
            throw new Error('GITHUB_WORKSPACE is not set in the current repository!');
        }
        return process.env.GITHUB_WORKSPACE;
    }
    getTag(tag) {
        return cp.execSync(`git show-ref -s ${tag}`, { cwd: this.workspace }).toString().trim();
    }
    getPreviousTag(tag) {
        return cp.execSync(`git describe --tags --abbrev=0 ${tag}^`, { cwd: this.workspace }).toString().trim();
    }
    /**
     * Returns a list of commit hashes beginning AFTER fromTag, up to and
     * INCLUDING toTag.
     */
    getCommitsBetweenTags(fromTag, toTag) {
        return cp.execSync(`git rev-list ${fromTag}..${toTag}`).toString().trim().split('\n');
    }
}
exports.GitClient = GitClient;
async function getPullRequests(gitClient, githubClient, release) {
    const tag = release.tag_name;
    core.debug(`tag: ${tag}`);
    const previousTag = gitClient.getPreviousTag(tag);
    core.debug(`previousTag: ${previousTag}`);
    const commits = gitClient.getCommitsBetweenTags(previousTag, tag);
    core.debug(`commits: ${commits}`);
    const promises = commits.map((commitSha) => githubClient.getPullRequestsFromCommit(commitSha));
    const promiseResults = (await Promise.allSettled(promises)).flat();
    const pullRequests = [];
    for (const result of promiseResults) {
        if (result.status === 'fulfilled') {
            pullRequests.push(result.value);
        }
    }
    core.debug(`pullRequests: ${pullRequests.map(pr => pr.url)}`);
    return pullRequests;
}
function getLinkedIssues(_pullRequests) {
    return [];
}
async function run() {
    try {
        const options = getOptions();
        const { owner, repo } = getContext();
        if (options.mode !== ActionMode.LATEST) {
            throw new Error('Only "latest" mode is currently supported.');
        }
        const token = core.getInput('token', { required: true });
        if (token === 'DEBUG_TOKEN') {
            core.info('DEBUG_TOKEN has been provided, exiting early.');
            core.setOutput('total-comments', 0);
            return;
        }
        const octokit = github.getOctokit(token);
        const githubClient = new GithubClient(octokit, owner, repo);
        const gitClient = new GitClient();
        const latestRelease = await githubClient.getLatestRelease();
        const pullRequests = await getPullRequests(gitClient, githubClient, latestRelease);
        getLinkedIssues(pullRequests); // TODO
        // const totalComments = await commentOn(pullRequests, issues, release);
        core.setOutput('total-comments', 0); // TODO
    }
    catch (error) {
        core.setFailed(error.message);
    }
}
// eslint-disable-next-line @typescript-eslint/no-floating-promises
run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9DQUFvQztBQUNwQyxzQ0FBc0M7QUFDdEMsMENBQTBDO0FBRzFDLElBQVksVUFlWDtBQWZELFdBQVksVUFBVTtJQUNwQjs7Ozs7O09BTUc7SUFDSCx5QkFBVyxDQUFBO0lBRVg7OztPQUdHO0lBQ0gsK0JBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQWZXLFVBQVUsR0FBVixrQkFBVSxLQUFWLGtCQUFVLFFBZXJCO0FBZ0JELFNBQVMsVUFBVTtJQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNoRCxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQzdCLENBQUM7QUFFRCxTQUFTLFVBQVU7SUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFckUsTUFBTSxJQUFJLEdBQWlDLFVBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDOUUsTUFBTSxlQUFlLEdBQVcsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWE7SUFDOUYsTUFBTSxPQUFPLEdBQUc7UUFDZCxJQUFJLEVBQUUsSUFBSSxhQUFKLElBQUksY0FB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ZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyBjb3JlIGZyb20gJ0BhY3Rpb25zL2NvcmUnO1xuaW1wb3J0ICogYXMgZ2l0aHViIGZyb20gJ0BhY3Rpb25zL2dpdGh1Yic7XG5pbXBvcnQgeyBHaXRodWJQdWxsUmVxdWVzdCwgR2l0aHViUmVsZWFzZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZW51bSBBY3Rpb25Nb2RlIHtcbiAgLyoqXG4gICAqIEJhY2tmaWxscyBwcmV2aW91cyBwdWxsIHJlcXVlc3RzIGFuZCBpc3N1ZXMgd2l0aCByZWxlYXNlIHJlbWluZGVyc1xuICAgKiBmb3IgYWxsIHByZXZpb3VzIHJlbGVhc2VzIGFzIGEgYnVsayBvcGVyYXRpb24uXG4gICAqXG4gICAqIFRoZSBvcGVyYXRpb24gd2lsbCBmaW5pc2ggd2hlbiB0aGUgbWF4LWJhY2tmaWxsLW9wZXJhdGlvbnMgbGltaXQgaXNcbiAgICogcmVhY2hlZCwgb3Igd2hlbiBhbGwgcmVsZWFzZXMgaGF2ZSBiZWVuIGJhY2tmaWxsZWQuXG4gICAqL1xuICBBTEwgPSAnYWxsJyxcblxuICAvKipcbiAgICogQWRkIHJlbGVhc2UgcmVtaW5kZXJzIHRvIGlzc3VlcyBhbmQgcHVsbCByZXF1ZXN0cyBmb3Igb25seSB0aGVcbiAgICogbGF0ZXN0IGF2YWlsYWJsZSByZWxlYXNlLlxuICAgKi9cbiAgTEFURVNUID0gJ2xhdGVzdCdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIE1vZGUgb2YgcnVubmluZyB0aGUgYWN0aW9uLlxuICAgKiBAZGVmYXVsdCBBY3Rpb25Nb2RlLkxBVEVTVFxuICAgKi9cbiAgcmVhZG9ubHkgbW9kZT86IEFjdGlvbk1vZGU7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIGNvbW1lbnRzIHRvIGFwcGx5IHdoaWxlIHJ1bm5pbmcgdGhlIGFjdGlvbi5cbiAgICogQGRlZmF1bHQgNTBcbiAgICovXG4gIHJlYWRvbmx5IG1heGltdW1Db21tZW50cz86IG51bWJlcjtcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGV4dCgpIHtcbiAgY29yZS5kZWJ1Zyhgb3duZXI6ICR7Z2l0aHViLmNvbnRleHQucmVwby5vd25lcn1gKTtcbiAgY29yZS5kZWJ1ZyhgcmVwbzogJHtnaXRodWIuY29udGV4dC5yZXBvLnJlcG99YCk7XG4gIHJldHVybiBnaXRodWIuY29udGV4dC5yZXBvO1xufVxuXG5mdW5jdGlvbiBnZXRPcHRpb25zKCk6IEFjdGlvbk9wdGlvbnMge1xuICBjb3JlLmRlYnVnKGBtb2RlOiAke2NvcmUuZ2V0SW5wdXQoJ21vZGUnKX1gKTtcbiAgY29yZS5kZWJ1ZyhgbWF4aW11bS1jb21tZW50czogJHtjb3JlLmdldElucHV0KCdtYXhpbXVtLWNvbW1lbnRzJyl9YCk7XG5cbiAgY29uc3QgbW9kZTogQWN0aW9uTW9kZSB8IHVuZGVmaW5lZCA9ICg8YW55PkFjdGlvbk1vZGUpW2NvcmUuZ2V0SW5wdXQoJ21vZGUnKV07XG4gIGNvbnN0IG1heGltdW1Db21tZW50czogbnVtYmVyID0gcGFyc2VJbnQoY29yZS5nZXRJbnB1dCgnbWF4aW11bS1jb21tZW50cycpLCAxMCk7IC8vIG1heSBiZSBOYU5cbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBtb2RlOiBtb2RlID8/IEFjdGlvbk1vZGUuTEFURVNULFxuICAgIG1heGltdW1Db21tZW50czogbWF4aW11bUNvbW1lbnRzIHx8IDUwLFxuICB9O1xuXG4gIGNvcmUuZGVidWcoYG9wdGlvbnM6ICR7SlNPTi5zdHJpbmdpZnkob3B0aW9ucyl9YCk7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbnR5cGUgSHlkcmF0ZWRPY3Rva2l0ID0gUmV0dXJuVHlwZTx0eXBlb2YgZ2l0aHViLmdldE9jdG9raXQ+XG5cbmV4cG9ydCBjbGFzcyBHaXRodWJDbGllbnQge1xuICBwcml2YXRlIHJlYWRvbmx5IG9jdG9raXQ6IEh5ZHJhdGVkT2N0b2tpdDtcbiAgcHJpdmF0ZSByZWFkb25seSBvd25lcjogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IHJlcG86IHN0cmluZztcbiAgY29uc3RydWN0b3Iob2N0b2tpdDogSHlkcmF0ZWRPY3Rva2l0LCBvd25lcjogc3RyaW5nLCByZXBvOiBzdHJpbmcpIHtcbiAgICB0aGlzLm9jdG9raXQgPSBvY3Rva2l0O1xuICAgIHRoaXMub3duZXIgPSBvd25lcjtcbiAgICB0aGlzLnJlcG8gPSByZXBvO1xuICB9XG5cbiAgYXN5bmMgZ2V0TGF0ZXN0UmVsZWFzZSgpOiBQcm9taXNlPEdpdGh1YlJlbGVhc2U+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMub2N0b2tpdC5yZXF1ZXN0KGBHRVQgL3JlcG9zLyR7dGhpcy5vd25lcn0vJHt0aGlzLnJlcG99L3JlbGVhc2VzL2xhdGVzdGApO1xuICAgIGNvcmUuZGVidWcoYGdldExhdGVzdFJlbGVhc2U6ICR7SlNPTi5zdHJpbmdpZnkocmVzcG9uc2UpfWApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH1cblxuICBhc3luYyBnZXRQdWxsUmVxdWVzdHNGcm9tQ29tbWl0KGNvbW1pdFNoYTogc3RyaW5nKTogUHJvbWlzZTxHaXRodWJQdWxsUmVxdWVzdD4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5vY3Rva2l0LnJlcXVlc3QoYEdFVCAvcmVwb3MvJHt0aGlzLm93bmVyfS8ke3RoaXMucmVwb30vY29tbWl0cy8ke2NvbW1pdFNoYX0vcHVsbHNgKTtcbiAgICBjb3JlLmRlYnVnKGBnZXRQdWxsUmVxdWVzdHNGcm9tQ29tbWl0OiAke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlKX1gKTtcblxuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHaXRDbGllbnQge1xuICBwcml2YXRlIHJlYWRvbmx5IHdvcmtzcGFjZTogc3RyaW5nO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLndvcmtzcGFjZSA9IHRoaXMuc2V0dXBXb3Jrc3BhY2UoKTtcbiAgfVxuXG4gIHNldHVwV29ya3NwYWNlKCkge1xuICAgIGlmICghcHJvY2Vzcy5lbnYuR0lUSFVCX1dPUktTUEFDRSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdHSVRIVUJfV09SS1NQQUNFIGlzIG5vdCBzZXQgaW4gdGhlIGN1cnJlbnQgcmVwb3NpdG9yeSEnKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52LkdJVEhVQl9XT1JLU1BBQ0U7XG4gIH1cblxuICBnZXRUYWcodGFnOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBjcC5leGVjU3luYyhgZ2l0IHNob3ctcmVmIC1zICR7dGFnfWAsIHsgY3dkOiB0aGlzLndvcmtzcGFjZSB9KS50b1N0cmluZygpLnRyaW0oKTtcbiAgfVxuXG4gIGdldFByZXZpb3VzVGFnKHRhZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY3AuZXhlY1N5bmMoYGdpdCBkZXNjcmliZSAtLXRhZ3MgLS1hYmJyZXY9MCAke3RhZ31eYCwgeyBjd2Q6IHRoaXMud29ya3NwYWNlIH0pLnRvU3RyaW5nKCkudHJpbSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIGNvbW1pdCBoYXNoZXMgYmVnaW5uaW5nIEFGVEVSIGZyb21UYWcsIHVwIHRvIGFuZFxuICAgKiBJTkNMVURJTkcgdG9UYWcuXG4gICAqL1xuICBnZXRDb21taXRzQmV0d2VlblRhZ3MoZnJvbVRhZzogc3RyaW5nLCB0b1RhZzogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBjcC5leGVjU3luYyhgZ2l0IHJldi1saXN0ICR7ZnJvbVRhZ30uLiR7dG9UYWd9YCkudG9TdHJpbmcoKS50cmltKCkuc3BsaXQoJ1xcbicpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFB1bGxSZXF1ZXN0cyhnaXRDbGllbnQ6IEdpdENsaWVudCwgZ2l0aHViQ2xpZW50OiBHaXRodWJDbGllbnQsIHJlbGVhc2U6IEdpdGh1YlJlbGVhc2UpOiBQcm9taXNlPEdpdGh1YlB1bGxSZXF1ZXN0W10+IHtcbiAgY29uc3QgdGFnID0gcmVsZWFzZS50YWdfbmFtZTtcbiAgY29yZS5kZWJ1ZyhgdGFnOiAke3RhZ31gKTtcblxuICBjb25zdCBwcmV2aW91c1RhZyA9IGdpdENsaWVudC5nZXRQcmV2aW91c1RhZyh0YWcpO1xuICBjb3JlLmRlYnVnKGBwcmV2aW91c1RhZzogJHtwcmV2aW91c1RhZ31gKTtcblxuICBjb25zdCBjb21taXRzID0gZ2l0Q2xpZW50LmdldENvbW1pdHNCZXR3ZWVuVGFncyhwcmV2aW91c1RhZywgdGFnKTtcbiAgY29yZS5kZWJ1ZyhgY29tbWl0czogJHtjb21taXRzfWApO1xuXG4gIGNvbnN0IHByb21pc2VzID0gY29tbWl0cy5tYXAoKGNvbW1pdFNoYSkgPT4gZ2l0aHViQ2xpZW50LmdldFB1bGxSZXF1ZXN0c0Zyb21Db21taXQoY29tbWl0U2hhKSk7XG4gIGNvbnN0IHByb21pc2VSZXN1bHRzID0gKGF3YWl0IFByb21pc2UuYWxsU2V0dGxlZChwcm9taXNlcykpLmZsYXQoKTtcbiAgY29uc3QgcHVsbFJlcXVlc3RzID0gW107XG4gIGZvciAoY29uc3QgcmVzdWx0IG9mIHByb21pc2VSZXN1bHRzKSB7XG4gICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09ICdmdWxmaWxsZWQnKSB7XG4gICAgICBwdWxsUmVxdWVzdHMucHVzaChyZXN1bHQudmFsdWUpO1xuICAgIH1cbiAgfVxuICBjb3JlLmRlYnVnKGBwdWxsUmVxdWVzdHM6ICR7cHVsbFJlcXVlc3RzLm1hcChwciA9PiBwci51cmwpfWApO1xuXG4gIHJldHVybiBwdWxsUmVxdWVzdHM7XG59XG5cbmZ1bmN0aW9uIGdldExpbmtlZElzc3VlcyhfcHVsbFJlcXVlc3RzOiBHaXRodWJQdWxsUmVxdWVzdFtdKTogYW55W10geyAvLyBUT0RPOiB0eXBlIHByb3Blcmx5XG4gIHJldHVybiBbXTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuKCk6IFByb21pc2U8dm9pZD4ge1xuICB0cnkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBnZXRPcHRpb25zKCk7XG4gICAgY29uc3QgeyBvd25lciwgcmVwbyB9ID0gZ2V0Q29udGV4dCgpO1xuXG4gICAgaWYgKG9wdGlvbnMubW9kZSAhPT0gQWN0aW9uTW9kZS5MQVRFU1QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBcImxhdGVzdFwiIG1vZGUgaXMgY3VycmVudGx5IHN1cHBvcnRlZC4nKTtcbiAgICB9XG5cbiAgICBjb25zdCB0b2tlbiA9IGNvcmUuZ2V0SW5wdXQoJ3Rva2VuJywgeyByZXF1aXJlZDogdHJ1ZSB9KTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0RFQlVHX1RPS0VOJykge1xuICAgICAgY29yZS5pbmZvKCdERUJVR19UT0tFTiBoYXMgYmVlbiBwcm92aWRlZCwgZXhpdGluZyBlYXJseS4nKTtcbiAgICAgIGNvcmUuc2V0T3V0cHV0KCd0b3RhbC1jb21tZW50cycsIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG9jdG9raXQgPSBnaXRodWIuZ2V0T2N0b2tpdCh0b2tlbik7XG4gICAgY29uc3QgZ2l0aHViQ2xpZW50ID0gbmV3IEdpdGh1YkNsaWVudChvY3Rva2l0LCBvd25lciwgcmVwbyk7XG4gICAgY29uc3QgZ2l0Q2xpZW50ID0gbmV3IEdpdENsaWVudCgpO1xuXG4gICAgY29uc3QgbGF0ZXN0UmVsZWFzZSA9IGF3YWl0IGdpdGh1YkNsaWVudC5nZXRMYXRlc3RSZWxlYXNlKCk7XG4gICAgY29uc3QgcHVsbFJlcXVlc3RzID0gYXdhaXQgZ2V0UHVsbFJlcXVlc3RzKGdpdENsaWVudCwgZ2l0aHViQ2xpZW50LCBsYXRlc3RSZWxlYXNlKTtcblxuICAgIGdldExpbmtlZElzc3VlcyhwdWxsUmVxdWVzdHMpOyAvLyBUT0RPXG5cbiAgICAvLyBjb25zdCB0b3RhbENvbW1lbnRzID0gYXdhaXQgY29tbWVudE9uKHB1bGxSZXF1ZXN0cywgaXNzdWVzLCByZWxlYXNlKTtcblxuICAgIGNvcmUuc2V0T3V0cHV0KCd0b3RhbC1jb21tZW50cycsIDApOyAvLyBUT0RPXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29yZS5zZXRGYWlsZWQoZXJyb3IubWVzc2FnZSk7XG4gIH1cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xucnVuKCk7Il19