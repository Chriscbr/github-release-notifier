"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitClient = exports.GithubClient = exports.ActionMode = void 0;
const cp = require("child_process");
const core = require("@actions/core");
const github = require("@actions/github");
var ActionMode;
(function (ActionMode) {
    /**
     * Backfills previous pull requests and issues with release reminders
     * for all previous releases as a bulk operation.
     *
     * The operation will finish when the max-backfill-operations limit is
     * reached, or when all releases have been backfilled.
     */
    ActionMode["ALL"] = "all";
    /**
     * Add release reminders to issues and pull requests for only the
     * latest available release.
     */
    ActionMode["LATEST"] = "continuous";
})(ActionMode = exports.ActionMode || (exports.ActionMode = {}));
function getOptions() {
    const mode = ActionMode[core.getInput('mode')];
    const maximumComments = parseInt(core.getInput('maximum-comments'), 10); // may be NaN
    return {
        mode: mode !== null && mode !== void 0 ? mode : ActionMode.LATEST,
        maximumComments: maximumComments || 50,
    };
}
class GithubClient {
    constructor(octokit, owner, repo) {
        this.octokit = octokit;
        this.owner = owner;
        this.repo = repo;
    }
    async getLatestRelease() {
        return this.octokit.request(`GET /repos/${this.owner}/${this.repo}/releases/latest`);
        // return this.octokit.rest.repos.getLatestRelease({
        //   owner: this.owner,
        //   repo: this.repo,
        // });
    }
    async getPullRequests(commitSha) {
        return this.octokit.request(`GET /repos/${this.owner}/${this.repo}/commits/${commitSha}/pulls`);
    }
}
exports.GithubClient = GithubClient;
class GitClient {
    constructor() {
        this.workspace = this.setupWorkspace();
    }
    setupWorkspace() {
        if (!process.env.GITHUB_WORKSPACE) {
            throw new Error('GITHUB_WORKSPACE is not set in the current repository!');
        }
        return process.env.GITHUB_WORKSPACE;
    }
    getTag(tag) {
        return cp.execSync(`git show-ref -s ${tag}`, { cwd: this.workspace }).toString().trim();
    }
    getPreviousTag(tag) {
        return cp.execSync(`git describe --tags --abbrev=0 ${tag}^`, { cwd: this.workspace }).toString().trim();
    }
    /**
     * Returns a list of commit hashes beginning AFTER fromTag, up to and
     * INCLUDING toTag.
     */
    getCommitsBetweenTags(fromTag, toTag) {
        return cp.execSync(`git rev-list ${fromTag}..${toTag}`).toString().trim().split('\n');
    }
}
exports.GitClient = GitClient;
async function getPullRequests(gitClient, githubClient, release) {
    const tag = release.tag_name;
    const previousTag = gitClient.getPreviousTag(tag);
    const commits = gitClient.getCommitsBetweenTags(previousTag, tag);
    console.error(commits);
    const promises = commits.map((commitSha) => githubClient.getPullRequests(commitSha));
    const pullRequestsResults = (await Promise.allSettled(promises)).flat();
    const pullRequests = [];
    for (const result of pullRequestsResults) {
        if (result.status === 'fulfilled') {
            pullRequests.push(result.value.data);
        }
    }
    console.error(pullRequests);
    return pullRequests;
}
function getLinkedIssues(_pullRequests) {
    return [];
}
async function run() {
    try {
        const token = core.getInput('token', { required: true });
        const { owner, repo } = github.context.repo;
        core.debug(`owner: ${owner}`);
        core.debug(`repo: ${repo}`);
        core.debug(core.getInput('mode'));
        core.debug(core.getInput('maximum-comments'));
        core.debug(`workspace: ${process.env.GITHUB_WORKSPACE}`);
        const options = getOptions();
        core.debug(`options: ${JSON.stringify(options)}`);
        if (options.mode !== ActionMode.LATEST) {
            throw new Error('Only "latest" mode is currently supported.');
        }
        const octokit = github.getOctokit(token);
        const githubClient = new GithubClient(octokit, owner, repo);
        const gitClient = new GitClient();
        const { data: latestRelease } = await githubClient.getLatestRelease();
        core.debug(`latest release: ${JSON.stringify(latestRelease)}`);
        const pullRequests = await getPullRequests(gitClient, githubClient, latestRelease);
        core.debug('pull requests:' + pullRequests.map((pr) => pr.title).join('\n'));
        getLinkedIssues(pullRequests); // TODO
        // const totalComments = await commentOn(pullRequests, issues, release);
        core.info('Success!');
        core.setOutput('total-comments', 0); // TODO
    }
    catch (error) {
        core.setFailed(error.message);
    }
}
// eslint-disable-next-line @typescript-eslint/no-floating-promises
run();
//# sourceMappingURL=data:application/json;base64,