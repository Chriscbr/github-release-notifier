import { GITHUB_RELEASE_NOTIFIER_TAG } from '../src/constants';
import { isCommentCreatedByAction, parseIssueNumbers } from '../src/core';
import { exampleIssueComment } from '../src/types';

describe('issue number parsing', () => {
  test('base cases', () => {
    expect(new Set(parseIssueNumbers('hello world!'))).toEqual(new Set([]));
    expect(new Set(parseIssueNumbers('closes #3, closed #4, close #5!'))).toEqual(new Set([3, 4, 5]));
    expect(new Set(parseIssueNumbers('resolved #3, resolve #4, resolves #5!'))).toEqual(new Set([3, 4, 5]));
    expect(new Set(parseIssueNumbers('fix #3, fixed #4, fixes #5!'))).toEqual(new Set([3, 4, 5]));
  });

  test('ignore capitalization', () => {
    expect(new Set(parseIssueNumbers('CLOSED #3, fIXES #4, Resolves #5!'))).toEqual(new Set([3, 4, 5]));
  });

  test('works with large numbers', () => {
    expect(new Set(parseIssueNumbers('this resolves #12345'))).toEqual(new Set([12345]));
  });
});

describe('isCommentCreatedByAction', () => {
  test('ignores regular comments', () => {
    expect(isCommentCreatedByAction(comment('maintainer', 'hello!'))).toEqual(false);
  });

  test('ignores comments created by other actions', () => {
    expect(isCommentCreatedByAction(comment('github-actions', 'This issue is stale.'))).toEqual(false);
    expect(isCommentCreatedByAction(comment('github-actions[bot]', 'This issue is stale.'))).toEqual(false);
  });

  test('identifies comments generated by the action', () => {
    expect(isCommentCreatedByAction(comment('user', `${GITHUB_RELEASE_NOTIFIER_TAG} hello!`))).toEqual(true);
    expect(isCommentCreatedByAction(comment('github-actions', `this is an automated message ${GITHUB_RELEASE_NOTIFIER_TAG}`))).toEqual(true);
    expect(isCommentCreatedByAction(comment('github-actions[bot]', `${GITHUB_RELEASE_NOTIFIER_TAG} your PR has been merged!`))).toEqual(true);
  });
});

function comment(login: string, body: string) {
  const c = exampleIssueComment;
  c.user.login = login;
  c.body = body;
  return c;
}
